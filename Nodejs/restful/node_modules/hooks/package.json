{
  "_args": [
    [
      "hooks@0.3.2",
      "C:\\Users\\RajeevPC\\Desktop\\restful\\node_modules\\mongoose"
    ]
  ],
  "_from": "hooks@0.3.2",
  "_id": "hooks@0.3.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/hooks",
  "_npmUser": {
    "email": "brian.noguchi@gmail.com",
    "name": "bnoguchi"
  },
  "_npmVersion": "1.3.5",
  "_phantomChildren": {},
  "_requested": {
    "name": "hooks",
    "raw": "hooks@0.3.2",
    "rawSpec": "0.3.2",
    "scope": null,
    "spec": "0.3.2",
    "type": "version"
  },
  "_requiredBy": [
    "/mongoose"
  ],
  "_resolved": "https://registry.npmjs.org/hooks/-/hooks-0.3.2.tgz",
  "_shasum": "a31f060c2026cea6cf1ca3eb178430e718e1c4a3",
  "_shrinkwrap": null,
  "_spec": "hooks@0.3.2",
  "_where": "C:\\Users\\RajeevPC\\Desktop\\restful\\node_modules\\mongoose",
  "author": {
    "email": "brian.noguchi@gmail.com",
    "name": "Brian Noguchi",
    "url": "https://github.com/bnoguchi/"
  },
  "bugs": {
    "url": "https://github.com/bnoguchi/hooks-js/issues"
  },
  "dependencies": {},
  "description": "Adds pre and post hook functionality to your JavaScript methods.",
  "devDependencies": {
    "expresso": ">=0.7.6",
    "should": ">=0.2.1",
    "underscore": ">=1.1.4"
  },
  "directories": {
    "lib": "."
  },
  "dist": {
    "shasum": "a31f060c2026cea6cf1ca3eb178430e718e1c4a3",
    "tarball": "https://registry.npmjs.org/hooks/-/hooks-0.3.2.tgz"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "homepage": "https://github.com/bnoguchi/hooks-js/",
  "keywords": [
    "node",
    "hooks",
    "middleware",
    "pre",
    "post"
  ],
  "licenses": [
    "MIT"
  ],
  "main": "./hooks.js",
  "maintainers": [
    {
      "email": "brian.noguchi@gmail.com",
      "name": "bnoguchi"
    }
  ],
  "name": "hooks",
  "optionalDependencies": {},
  "readme": "hooks\n============\n\nAdd pre and post middleware hooks to your JavaScript methods.\n\n## Installation\n    npm install hooks\n\n## Motivation\nSuppose you have a JavaScript object with a `save` method.\n\nIt would be nice to be able to declare code that runs before `save` and after `save`.\nFor example, you might want to run validation code before every `save`,\nand you might want to dispatch a job to a background job queue after `save`.\n\nOne might have an urge to hard code this all into `save`, but that turns out to\ncouple all these pieces of functionality (validation, save, and job creation) more\ntightly than is necessary. For example, what if someone does not want to do background\njob creation after the logical save?\n\nIt is nicer to tack on functionality using what we call `pre` and `post` hooks. These\nare functions that you define and that you direct to execute before or after particular\nmethods.\n\n## Example\nWe can use `hooks` to add validation and background jobs in the following way:\n\n```javascript\nvar hooks = require('hooks')\n  , Document = require('./path/to/some/document/constructor');\n\n// Add hooks' methods: `hook`, `pre`, and `post`\nfor (var k in hooks) {\n  Document[k] = hooks[k];\n}\n\n// Define a new method that is able to invoke pre and post middleware\nDocument.hook('save', Document.prototype.save);\n\n// Define a middleware function to be invoked before 'save'\nDocument.pre('save', function validate (next) {\n  // The `this` context inside of `pre` and `post` functions\n  // is the Document instance\n  if (this.isValid()) next();      // next() passes control to the next middleware\n                                   // or to the target method itself\n  else next(new Error(\"Invalid\")); // next(error) invokes an error callback\n});\n\n// Define a middleware function to be invoked after 'save'\nDocument.post('save', function createJob (next) {\n  this.sendToBackgroundQueue();\n  next();\n});\n```\n\nIf you already have defined `Document.prototype` methods for which you want pres and posts,\nthen you do not need to explicitly invoke `Document.hook(...)`. Invoking `Document.pre(methodName, fn)`\nor `Document.post(methodName, fn)` will automatically and lazily change `Document.prototype[methodName]`\nso that it plays well with `hooks`. An equivalent way to implement the previous example is:\n\n```javascript\nvar hooks = require('hooks')\n  , Document = require('./path/to/some/document/constructor');\n\n// Add hooks' methods: `hook`, `pre`, and `post`\nfor (var k in hooks) {\n  Document[k] = hooks[k];\n}\n\nDocument.prototype.save = function () {\n  // ...\n};\n\n// Define a middleware function to be invoked before 'save'\nDocument.pre('save', function validate (next) {\n  // The `this` context inside of `pre` and `post` functions\n  // is the Document instance\n  if (this.isValid()) next();      // next() passes control to the next middleware\n                                   // or to the target method itself\n  else next(new Error(\"Invalid\")); // next(error) invokes an error callback\n});\n\n// Define a middleware function to be invoked after 'save'\nDocument.post('save', function createJob (next) {\n  this.sendToBackgroundQueue();\n  next();\n});\n```\n\n## Pres and Posts as Middleware\nWe structure pres and posts as middleware to give you maximum flexibility:\n\n1. You can define **multiple** pres (or posts) for a single method.\n2. These pres (or posts) are then executed as a chain of methods.\n3. Any functions in this middleware chain can choose to halt the chain's execution by `next`ing an Error from that middleware function. If this occurs, then none of the other middleware in the chain will execute, and the main method (e.g., `save`) will not execute. This is nice, for example, when we don't want a document to save if it is invalid.\n\n## Defining multiple pres (or posts)\n`pre` and `post` are chainable, so you can define multiple via:\n```javascript\nDocument.pre('save', function (next) {\n  console.log(\"hello\");\n  next();\n}).pre('save', function (next) {\n  console.log(\"world\");\n  next();\n});\n\nDocument.post('save', function (next) {\n  console.log(\"hello\");\n  next();\n}).post('save', function (next) {\n  console.log(\"world\");\n  next();\n});\n```\n\nAs soon as one pre finishes executing, the next one will be invoked, and so on.\n\n## Error Handling\nYou can define a default error handler by passing a 2nd function as the 3rd argument to `hook`:\n```javascript\nDocument.hook('set', function (path, val) {\n  this[path] = val;\n}, function (err) {\n  // Handler the error here\n  console.error(err);\n});\n```\n\nThen, we can pass errors to this handler from a pre or post middleware function:\n```javascript\nDocument.pre('set', function (next, path, val) {\n  next(new Error());\n});\n```\n\nIf you do not set up a default handler, then `hooks` makes the default handler that just throws the `Error`.\n\nThe default error handler can be over-rided on a per method invocation basis.\n\nIf the main method that you are surrounding with pre and post middleware expects its last argument to be a function\nwith callback signature `function (error, ...)`, then that callback becomes the error handler, over-riding the default\nerror handler you may have set up.\n\n```javascript\nDocument.hook('save', function (callback) {\n  // Save logic goes here\n  ...\n});\n\nvar doc = new Document();\ndoc.save( function (err, saved) {\n  // We can pass err via `next` in any of our pre or post middleware functions\n  if (err) console.error(err);\n\n  // Rest of callback logic follows ...\n});\n```\n\n## Mutating Arguments via Middleware\n`pre` and `post` middleware can also accept the intended arguments for the method\nthey augment. This is useful if you want to mutate the arguments before passing\nthem along to the next middleware and eventually pass a mutated arguments list to\nthe main method itself.\n\nAs a simple example, let's define a method `set` that just sets a key, value pair.\nIf we want to namespace the key, we can do so by adding a `pre` middleware hook\nthat runs before `set`, alters the arguments by namespacing the `key` argument, and passes them onto `set`:\n\n```javascript\nDocument.hook('set', function (key, val) {\n  this[key] = val;\n});\nDocument.pre('set', function (next, key, val) {\n  next('namespace-' + key, val);\n});\nvar doc = new Document();\ndoc.set('hello', 'world');\nconsole.log(doc.hello); // undefined\nconsole.log(doc['namespace-hello']); // 'world'\n```\n\nAs you can see above, we pass arguments via `next`.\n\nIf you are not mutating the arguments, then you can pass zero arguments\nto `next`, and the next middleware function will still have access\nto the arguments.\n\n```javascript\nDocument.hook('set', function (key, val) {\n  this[key] = val;\n});\nDocument.pre('set', function (next, key, val) {\n  // I have access to key and val here\n  next(); // We don't need to pass anything to next\n});\nDocument.pre('set', function (next, key, val) {\n  // And I still have access to the original key and val here\n  next();\n});\n```\n\nFinally, you can add arguments that downstream middleware can also see:\n\n```javascript\n// Note that in the definition of `set`, there is no 3rd argument, options\nDocument.hook('set', function (key, val) {\n  // But...\n  var options = arguments[2]; // ...I have access to an options argument\n                              // because of pre function pre2 (defined below)\n  console.log(options); // '{debug: true}'\n  this[key] = val;\n});\nDocument.pre('set', function pre1 (next, key, val) {\n  // I only have access to key and val arguments\n  console.log(arguments.length); // 3\n  next(key, val, {debug: true});\n});\nDocument.pre('set', function pre2 (next, key, val, options) {\n  console.log(arguments.length); // 4\n  console.log(options); // '{ debug: true}'\n  next();\n});\nDocument.pre('set', function pre3 (next, key, val, options) {\n  // I still have access to key, val, AND the options argument introduced via the preceding middleware\n  console.log(arguments.length); // 4\n  console.log(options); // '{ debug: true}'\n  next();\n});\n\nvar doc = new Document()\ndoc.set('hey', 'there');\n```\n\n## Post middleware\n\nPost middleware intercepts the callback originally sent to the asynchronous function you have hooked to.\n\nThis means that the following chain of execution will occur in a typical `save` operation:\n\n(1) doc.save -> (2) pre --(next)--> (3) save calls back -> (4) post --(next)--> (5) targetFn\n\nIllustrated below:\n\n```\nDocument.pre('save', function (next) {\n  this.key = \"value\";\n  next();\n});\n// Post handler occurs before `set` calls back. This is useful if we need to grab something\n// async before `set` finishes.\nDocument.post('set', function (next) {\n  var me = this;\n  getSomethingAsync(function(value){ // let's assume it returns \"Hello Async\"\n    me.key2 = value;\n    next();\n  });\n});\n\nvar doc = new Document();\ndoc.save(function(err){\n  console.log(this.key);  // \"value\" - this value was saved\n  console.log(this.key2); // \"Hello Async\" - this value was *not* saved\n}\n\n```\n\nPost middleware must call `next()` or execution will stop.\n\n## Parallel `pre` middleware\n\nAll middleware up to this point has been \"serial\" middleware -- i.e., middleware whose logic\nis executed as a serial chain.\n\nSome scenarios call for parallel middleware -- i.e., middleware that can wait for several\nasynchronous services at once to respond.\n\nFor instance, you may only want to save a Document only after you have checked\nthat the Document is valid according to two different remote services.\n\nWe accomplish asynchronous middleware by adding a second kind of flow control callback\n(the only flow control callback so far has been `next`), called `done`.\n\n- `next` passes control to the next middleware in the chain\n- `done` keeps track of how many parallel middleware have invoked `done` and passes\n   control to the target method when ALL parallel middleware have invoked `done`. If\n   you pass an `Error` to `done`, then the error is handled, and the main method that is\n   wrapped by pres and posts will not get invoked.\n\nWe declare pre middleware that is parallel by passing a 3rd boolean argument to our `pre`\ndefinition method.\n\nWe illustrate via the parallel validation example mentioned above:\n\n```javascript\nDocument.hook('save', function targetFn (callback) {\n  // Save logic goes here\n  // ...\n  // This only gets run once the two `done`s are both invoked via preOne and preTwo.\n});\n\n                     // true marks this as parallel middleware\nDocument.pre('save', true, function preOne (next, doneOne, callback) {\n  remoteServiceOne.validate(this.serialize(), function (err, isValid) {\n    // The code in here will probably be run after the `next` below this block\n    // and could possibly be run after the console.log(\"Hola\") in `preTwo\n    if (err) return doneOne(err);\n    if (isValid) doneOne();\n  });\n  next(); // Pass control to the next middleware\n});\n\n// We will suppose that we need 2 different remote services to validate our document\nDocument.pre('save', true, function preTwo (next, doneTwo, callback) {\n  remoteServiceTwo.validate(this.serialize(), function (err, isValid) {\n    if (err) return doneTwo(err);\n    if (isValid) doneTwo();\n  });\n  next();\n});\n\n// While preOne and preTwo are parallel, preThree is a serial pre middleware\nDocument.pre('save', function preThree (next, callback) {\n  next();\n});\n\nvar doc = new Document();\ndoc.save( function (err, doc) {\n  // Do stuff with the saved doc here...\n});\n```\n\nIn the above example, flow control may happen in the following way:\n\n(1) doc.save -> (2) preOne --(next)--> (3) preTwo --(next)--> (4) preThree --(next)--> (wait for dones to invoke) -> (5) doneTwo -> (6) doneOne -> (7) targetFn\n\nSo what's happening is that:\n\n1. You call `doc.save(...)`\n2. First, your preOne middleware gets executed. It makes a remote call to the validation service and `next()`s to the preTwo middleware.\n3. Now, your preTwo middleware gets executed. It makes a remote call to another validation service and `next()`s to the preThree middleware.\n4. Your preThree middleware gets executed. It immediately `next()`s. But nothing else gets executing until both `doneOne` and `doneTwo` are invoked inside the callbacks handling the response from the two valiation services.\n5. We will suppose that validation remoteServiceTwo returns a response to us first. In this case, we call `doneTwo` inside the callback to remoteServiceTwo.\n6. Some fractions of a second later, remoteServiceOne returns a response to us. In this case, we call `doneOne` inside the callback to remoteServiceOne.\n7. `hooks` implementation keeps track of how many parallel middleware has been defined per target function. It detects that both asynchronous pre middlewares (`preOne` and `preTwo`) have finally called their `done` functions (`doneOne` and `doneTwo`), so the implementation finally invokes our `targetFn` (i.e., our core `save` business logic).\n\n## Removing Pres\n\nYou can remove a particular pre associated with a hook:\n\n    Document.pre('set', someFn);\n    Document.removePre('set', someFn);\n\nAnd you can also remove all pres associated with a hook:\n    Document.removePre('set'); // Removes all declared `pre`s on the hook 'set'\n\n## Tests\nTo run the tests:\n    make test\n\n### Contributors\n- [Brian Noguchi](https://github.com/bnoguchi)\n\n### License\nMIT License\n\n---\n### Author\nBrian Noguchi\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/bnoguchi/hooks-js.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.3.2"
}
